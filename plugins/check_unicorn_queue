#!/bin/bash
cd ~/CMS/CMS_Admin; nohup ruby /home/ruby/CMS/CMS_Admin/queuechk.rb -d 2 0.0.0.0:5000 > /home/ruby/CMS/CMS_Admin/cms_queue.log &
sleep 5
#pkill -f /home/ruby/CMS/CMS_Admin/queuechk.rb
ps -ef | grep queuechk.rb | grep -v grep | awk '{print $2}' | xargs kill
output="CMS queue at `date`"
#echo "$(tail -n 1 ~/CMS/CMS_Admin/cms_queue.log)"
if [[ "$(tail -n 1 ~/CMS/CMS_Admin/cms_queue.log)" -ge 10 ]]; then
       echo "CRITICAL- $output are there"
        exit 2
else

        echo "OK- $output are none "
        exit 0
fi


######################################################
vi /home/ruby/UnicornQueue-Checking/queuechk.rb

#!/usr/bin/env ruby

#How to Run

#ruby linux-tcp-listener-stats.rb -d 2 0.0.0.0:5566

# this is used to show or watch the number of active and queued
# connections on any listener socket from the command line
require 'rubygems'
require 'raindrops'
require 'optparse'
require 'ipaddr'
require 'ruby-debug'
usage = "Usage: #$0 [-d delay] ADDR..."
ARGV.size > 0 or abort usage
delay = false

# "normal" exits when driven on the command-line
trap(:INT) { exit 130 }
trap(:PIPE) { exit 0 }

opts = OptionParser.new('', 24, '  ') do |opts|
  opts.banner = usage
  opts.on('-d', '--delay=delay') { |nr| delay = nr.to_i }
  opts.parse! ARGV
end

ARGV.each do |addr|
  addr =~ %r{\A(127\..+):(\d+)\z} or next
  host, port = $1, $2
  hex_port = '%X' % port.to_i
  ip_addr = IPAddr.new(host)
  hex_host = ip_addr.hton.each_byte.inject('') { |s,o| s << '%02X' % o }
  socks = File.readlines('/proc/net/tcp')
  hex_addr = "#{hex_host}:#{hex_port}"
  if socks.grep(/^\s+\d+:\s+#{hex_addr}\s+/).empty? &&
     ! socks.grep(/^\s+\d+:\s+00000000:#{hex_port}\s+/).empty?
    warn "W: #{host}:#{port} (#{hex_addr}) not found in /proc/net/tcp"
    warn "W: Did you mean 0.0.0.0:#{port}?"
  end
end

fmt = "%20s %10u %10u \n"
begin
  a =[]
  stats = Raindrops::Linux.tcp_listener_stats(ARGV)
  stats.each do  |addr, stats|
  a << stats.queued
  end
  puts a
end while delay && sleep(delay)

